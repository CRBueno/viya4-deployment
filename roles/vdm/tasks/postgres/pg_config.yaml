- name: pg_config - Check for storage info ConfigMap
  block:
  - name: set facts 
    set_fact:
      dac_crunchy_storage_cm_found: false
      v4_crunchy_present: false
  - name: pg_config - Look for ConfigMap
    kubernetes.core.k8s_info:
      kubeconfig: "{{ KUBECONFIG }}"
      api_version: v1
      kind: ConfigMap
      name: dac-crunchy-storage-info
      namespace: "{{ NAMESPACE }}"
    register: cm_info
  - name: pg_config - set fact that ConfigMap was found
    set_fact:
      dac_crunchy_storage_cm_found: true
    ignore_errors: true
    when: "cm_info.resources"
  - name: pg_config - Use previous postgres storage map values
    debug: 
      msg:
      - "The previously found values for the postgres server storage class and access mode will be used."
      - "The values you have in your ansible vars will be ignored because the storage class is already present in your cluster."
    when:
      - dac_crunchy_storage_cm_found
  tags:
    - install
    - uninstall

# Check for v4 crunchy operator if ConfigMap not found
- name: pg_config - v4 crunchy operator check
  block:
  - name: pg_config - Find v4 crunchy deployment
    kubernetes.core.k8s_info:
      kubeconfig: "{{ KUBECONFIG }}"
      kind: Deployment
      name: sas-crunchy-data-postgres-operator
      namespace: "{{ NAMESPACE }}"
    register: deploy
  - name: pg_config - v4 crunchy operator found
    set_fact:
      v4_crunchy_present: true
    when: 
      - deploy.resources is defined
      - deploy.resources | length != 0
  - name: pg_config - v4 crunchy operator not found
    set_fact:
      v4_crunchy_present: false
    when: 
      - deploy.resources is defined
      - deploy.resources | length == 0
  when:
    - not dac_crunchy_storage_cm_found
  tags:
    - install
    - update

- name: pg_config
  block:
  - name: set facts 
    set_fact:
      default_pg_cluster_found: false
  - name: pg_config - Check for default pgcluster
    kubernetes.core.k8s_info:
      kubeconfig: "{{ KUBECONFIG }}"
      api_version: crunchydata.com/v1
      kind: Pgcluster
      name: sas-crunchy-data-postgres
      namespace: "{{ NAMESPACE }}"
    register: def_pgcluster_info
  - name: pg_config - default pg cluster found
    set_fact:
      default_pg_cluster_found: true
    ignore_errors: true
    when: "def_pgcluster_info.resources"
  tags:
    - install
    - update

- name: pg_config - query default PG PVC attributes
  block:
  # Query sizes for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC size
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres -o jsonpath='{.spec.resources.requests.storage}'
    ignore_errors: yes
    register: default_pg_size
  - debug: msg="{{ default_pg_size.stdout }}"
  - name: pg_config - query backrest PVC size
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres-pgbr-repo -o jsonpath='{.spec.resources.requests.storage}'
    ignore_errors: yes
    register: default_backrest_size
  - debug: msg="{{ default_backrest_size.stdout }}"

  # Query access mode for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC access mode
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres -o jsonpath='{.spec.accessModes}'
    ignore_errors: yes
    register: default_pg_access_mode
  - name: set fact from list
    set_fact:
      def_pg_access_mode: "{{ item }}"
    loop: "{{default_pg_access_mode.stdout | from_json}}"
  - debug: msg="{{ def_pg_access_mode }}"
  - name: pg_config - query backrest PVC access mode
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres-pgbr-repo -o jsonpath='{.spec.accessModes}'
    ignore_errors: yes
    register: default_backrest_access_mode
  - name: set fact from list
    set_fact:
      def_backrest_access_mode: "{{ item }}"
    loop: "{{default_backrest_access_mode.stdout | from_json}}"
  - debug: msg="{{ def_backrest_access_mode }}"

  # Query storageClassName for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC storage class
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres -o jsonpath='{.spec.storageClassName}'
    ignore_errors: yes
    register: default_pg_sc_name
  - debug: msg="{{ default_pg_sc_name.stdout }}"
  - name: pg_config - query backrest PVC storage class
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-postgres-pgbr-repo -o jsonpath='{.spec.storageClassName}'
    ignore_errors: yes
    register: default_backrest_sc_name
  - debug: msg="{{ default_backrest_sc_name.stdout }}"

  - name: postgres instance - Update ConfigMap
    kubernetes.core.k8s:
      kubeconfig: "{{ KUBECONFIG }}"
      state: present
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: dac-crunchy-storage-info
          namespace: "{{ NAMESPACE }}"
        data:
          default-postgres-storage-class: "{{ default_pg_sc_name.stdout | string }}"
          default-postgres-access-mode: "{{ def_pg_access_mode | string }}"
          default-postgres-storage-size: "{{ default_pg_size.stdout | string }}"
          default-backrest-storage-class: "{{ default_backrest_sc_name.stdout | string }}"
          default-backrest-access-mode: "{{ def_backrest_access_mode | string }}"
          default-backrest-storage-size: "{{ default_backrest_size.stdout | string }}"

  - name: pg_config - ConfigMap updated
    set_fact:
      dac_crunchy_storage_configmap_updated: true

  when: 
    - v4_crunchy_present
    - default_pg_cluster_found
    - not dac_crunchy_storage_cm_found
  tags:
    - install
    - update

- name: pg_config
  block:
  - name: set facts 
    set_fact:
      cds_pg_cluster_found: false
  - name: pg_config - Check for cds pgcluster
    kubernetes.core.k8s_info:
      kubeconfig: "{{ KUBECONFIG }}"
      api_version: crunchydata.com/v1
      kind: Pgcluster
      name: sas-crunchy-data-cdspostgres
      namespace: "{{ NAMESPACE }}"
    register: cds_pgcluster_info
  - name: pg_config - set fact that cds pg cluster found
    set_fact:
      cds_pg_cluster_found: true
    ignore_errors: true
    when: "cds_pgcluster_info.resources"
  tags:
    - install
    - update

- name: pg_config - query cds PG PVC attributes
  block:
  # Query sizes for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC size
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres -o jsonpath='{.spec.resources.requests.storage}'
    ignore_errors: yes
    register: cds_pg_size
  - debug: msg="{{ cds_pg_size.stdout }}"
  - name: pg_config - query backrest PVC size
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres-pgbr-repo -o jsonpath='{.spec.resources.requests.storage}'
    ignore_errors: yes
    register: cds_backrest_size
  - debug: msg="{{ cds_backrest_size.stdout }}"

  # Query access mode for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC access mode
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres -o jsonpath='{.spec.accessModes}'
    ignore_errors: yes
    register: cds_pg_access_mode
  - name: set fact from list
    set_fact:
      cdspost_pg_access_mode: "{{ item }}"
    loop: "{{cds_pg_access_mode.stdout | from_json}}"
  - debug: msg="{{ cdspost_pg_access_mode }}"
  - name: pg_config - query backrest PVC access mode
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres-pgbr-repo -o jsonpath='{.spec.accessModes}'
    ignore_errors: yes
    register: cds_backrest_access_mode
  - name: set fact from list
    set_fact:
      cdspost_backrest_access_mode: "{{ item }}"
    loop: "{{cds_backrest_access_mode.stdout | from_json}}"
  - debug: msg="{{ cdspost_backrest_access_mode }}"

  # Query storageClassName for PostgreSQL and pgBackRest crunchy v4 PVCs
  - name: pg_config - query PG PVC storage class
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres -o jsonpath='{.spec.storageClassName}'
    ignore_errors: yes
    register: cds_pg_sc_name
  - debug: msg="{{ cds_pg_sc_name.stdout }}"
  - name: pg_config - query backrest PVC storage class
    environment:
      KUBECONFIG: "{{ KUBECONFIG }}"
    ansible.builtin.shell: >
      kubectl -n {{ NAMESPACE }} get pvc sas-crunchy-data-cdspostgres-pgbr-repo -o jsonpath='{.spec.storageClassName}'
    ignore_errors: yes
    register: cds_backrest_sc_name
  - debug: msg="{{ cds_backrest_sc_name.stdout }}"

  - name: postgres instance - Update ConfigMap
    kubernetes.core.k8s:
      kubeconfig: "{{ KUBECONFIG }}"
      state: present
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: dac-crunchy-storage-info
          namespace: "{{ NAMESPACE }}"
        data:
          cds-postgres-storage-class: "{{ cds_pg_sc_name.stdout | string }}"
          cds-postgres-access-mode: "{{ cdspost_pg_access_mode | string }}"
          cds-postgres-storage-size: "{{ cds_pg_size.stdout | string }}"
          cds-backrest-storage-class: "{{ cds_backrest_sc_name.stdout | string }}"
          cds-backrest-access-mode: "{{ cdspost_backrest_access_mode | string }}"
          cds-backrest-storage-size: "{{ cds_backrest_size.stdout | string }}"

  - name: pg_config - ConfigMap updated
    set_fact:
      dac_crunchy_storage_configmap_updated: true

  when: 
    - v4_crunchy_present
    - cds_pg_cluster_found
    - not dac_crunchy_storage_cm_found
  tags:
    - install
    - update

- name: pg_config - ConfigMap is present
  set_fact:
    dac_crunchy_storage_cm_found: true
  when: 
    - dac_crunchy_storage_configmap_updated is defined
    - dac_crunchy_storage_configmap_updated
  tags:
    - install
    - update

- name: Pause here
  pause:
    prompt: Please confirm you want to continue
  tags:
    - install
    - uninstall
    - update
 